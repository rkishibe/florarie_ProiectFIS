Index: src/main/java/florarie/test/UserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie.tests;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.junit.jupiter.api.*;\r\nimport org.loose.fis.sre.exceptions.UsernameAlreadyExistsException;\r\nimport org.loose.fis.sre.model.User;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport static org.testfx.assertions.api.Assertions.assertThat;\r\n\r\nclass UserServiceTest {\r\n\r\n    public static final String ADMIN = \"admin\";\r\n\r\n    @BeforeAll\r\n    static void beforeAll() {\r\n        System.out.println(\"Before Class\");\r\n    }\r\n\r\n    @AfterAll\r\n    static void afterAll() {\r\n        System.out.println(\"After Class\");\r\n    }\r\n\r\n    @BeforeEach\r\n    void setUp() throws Exception {\r\n        FileSystemService.APPLICATION_FOLDER = \".test-registration-example\";\r\n        FileUtils.cleanDirectory(FileSystemService.getApplicationHomeFolder().toFile());\r\n        UserService.initDatabase();\r\n    }\r\n\r\n    @AfterEach\r\n    void tearDown() {\r\n        System.out.println(\"After each\");\r\n    }\r\n\r\n\r\n    @Test\r\n    @DisplayName(\"Database is initialized, and there are no users\")\r\n    void testDatabaseIsInitializedAndNoUserIsPersisted() {\r\n        assertThat(UserService.getAllUsers()).isNotNull();\r\n        assertThat(UserService.getAllUsers()).isEmpty();\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"User is successfully persisted to Database\")\r\n    void testUserIsAddedToDatabase() throws UsernameAlreadyExistsException {\r\n        UserService.addUser(ADMIN, ADMIN, ADMIN);\r\n        assertThat(UserService.getAllUsers()).isNotEmpty();\r\n        assertThat(UserService.getAllUsers()).size().isEqualTo(1);\r\n        User user = UserService.getAllUsers().get(0);\r\n        assertThat(user).isNotNull();\r\n        assertThat(user.getUsername()).isEqualTo(ADMIN);\r\n        assertThat(user.getPassword()).isEqualTo(UserService.encodePassword(ADMIN, ADMIN));\r\n        assertThat(user.getRole()).isEqualTo(ADMIN);\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"User can not be added twice\")\r\n    void testUserCanNotBeAddedTwice() {\r\n        assertThrows(UsernameAlreadyExistsException.class, () -> {\r\n            UserService.addUser(ADMIN, ADMIN, ADMIN);\r\n            UserService.addUser(ADMIN, ADMIN, ADMIN);\r\n        });\r\n    }\r\n}
===================================================================
diff --git a/src/main/java/florarie/test/UserServiceTest.java b/src/main/java/florarie/test/UserServiceTest.java
--- a/src/main/java/florarie/test/UserServiceTest.java	
+++ b/src/main/java/florarie/test/UserServiceTest.java	
@@ -1,66 +1,97 @@
-package florarie.tests;
+package florarie.test;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import florarie.services.FileSystemService;
+import florarie.services.UserService;
 import org.apache.commons.io.FileUtils;
+import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.jupiter.api.*;
-import org.loose.fis.sre.exceptions.UsernameAlreadyExistsException;
-import org.loose.fis.sre.model.User;
-
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.testfx.assertions.api.Assertions.assertThat;
+import florarie.exceptions.UsernameAlreadyExists;
+import florarie.model.User;
 
-class UserServiceTest {
+import java.io.IOException;
+import java.nio.file.Files;
+import java.util.List;
 
-    public static final String ADMIN = "admin";
+import static org.junit.Assert.*;
+//import static org.testfx.assertions.api.Assertions.assertThat;
 
-    @BeforeAll
-    static void beforeAll() {
-        System.out.println("Before Class");
-    }
+public class UserServiceTest {
 
-    @AfterAll
-    static void afterAll() {
-        System.out.println("After Class");
-    }
-
-    @BeforeEach
-    void setUp() throws Exception {
+    @BeforeClass
+    public static void setupClass() {
         FileSystemService.APPLICATION_FOLDER = ".test-registration-example";
-        FileUtils.cleanDirectory(FileSystemService.getApplicationHomeFolder().toFile());
-        UserService.initDatabase();
+        FileSystemService.initApplicationHomeDirIfNeeded();
+    }
+
+    @Before
+    public void setUp() throws IOException {
+        FileUtils.cleanDirectory(FileSystemService.getApplicationHomePath().toFile());
     }
 
-    @AfterEach
-    void tearDown() {
-        System.out.println("After each");
+    @Test
+    public void testCopyDefaultFileIfNotExists() throws Exception {
+        UserService.loadUsersFromFile();
+        assertTrue(Files.exists(UserService.USERS_PATH));
     }
 
+    @Test
+    public void testLoadUsersFromFile() throws Exception {
+        UserService.loadUsersFromFile();
+        assertNotNull(UserService.users);
+        assertEquals(0, UserService.users.size());
+    }
+
+    @Test
+    public void testAddOneUser() throws Exception {
+        UserService.loadUsersFromFile();
+        UserService.addUser("test", "testPass", "432");
+        assertNotNull(UserService.users);
+        assertEquals(1, UserService.users.size());
+    }
 
     @Test
-    @DisplayName("Database is initialized, and there are no users")
-    void testDatabaseIsInitializedAndNoUserIsPersisted() {
-        assertThat(UserService.getAllUsers()).isNotNull();
-        assertThat(UserService.getAllUsers()).isEmpty();
+    public void testAddTwoUsers() throws Exception {
+        UserService.loadUsersFromFile();
+        UserService.addUser("test1", "testPass1", "123");
+        UserService.addUser("test2", "testPass2", "456");
+        assertNotNull(UserService.users);
+        assertEquals(2, UserService.users.size());
     }
+
+    /*@Test(expected = UsernameAlreadyExists.class)
+    public void testAddUserAlreadyExists() throws Exception {
+        UserService.loadUsersFromFile();
+        UserService.addUser("test1", "testPass1", "123");
+        assertNotNull(UserService.users);
+        UserService.checkUserDoesNotAlreadyExist("test1");
+    }*/
 
     @Test
-    @DisplayName("User is successfully persisted to Database")
-    void testUserIsAddedToDatabase() throws UsernameAlreadyExistsException {
-        UserService.addUser(ADMIN, ADMIN, ADMIN);
-        assertThat(UserService.getAllUsers()).isNotEmpty();
-        assertThat(UserService.getAllUsers()).size().isEqualTo(1);
-        User user = UserService.getAllUsers().get(0);
-        assertThat(user).isNotNull();
-        assertThat(user.getUsername()).isEqualTo(ADMIN);
-        assertThat(user.getPassword()).isEqualTo(UserService.encodePassword(ADMIN, ADMIN));
-        assertThat(user.getRole()).isEqualTo(ADMIN);
+    public void testAddOneUserIsPersisted() throws Exception {
+        UserService.loadUsersFromFile();
+        UserService.addUser("test", "testPass", "432");
+        List<User> users = new ObjectMapper().readValue(UserService.USERS_PATH.toFile(), new TypeReference<List<User>>() {
+        });
+        assertNotNull(users);
+        assertEquals(1, users.size());
     }
 
     @Test
-    @DisplayName("User can not be added twice")
-    void testUserCanNotBeAddedTwice() {
-        assertThrows(UsernameAlreadyExistsException.class, () -> {
-            UserService.addUser(ADMIN, ADMIN, ADMIN);
-            UserService.addUser(ADMIN, ADMIN, ADMIN);
+    public void testAddTwoUserArePersisted() throws Exception {
+        UserService.loadUsersFromFile();
+        UserService.addUser("test1", "testPass1", "123");
+        UserService.addUser("test2", "testPass2", "432");
+        List<User> users = new ObjectMapper().readValue(UserService.USERS_PATH.toFile(), new TypeReference<List<User>>() {
         });
+        assertNotNull(users);
+        assertEquals(2, users.size());
+    }
+
+    @Test
+    public void testPasswordEncoding() {
+        assertNotEquals("testPass1", UserService.encodePassword("username1", "testPass1"));
     }
 }
\ No newline at end of file
Index: src/main/java/florarie/test/RegistrationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie.tests;\r\n\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport florarie.services.FileSystemService;\r\nimport florarie.services.UserService;\r\nimport org.testfx.api.FxRobot;\r\nimport org.testfx.framework.junit5.ApplicationExtension;\r\nimport org.testfx.framework.junit5.Start;\r\n\r\nimport static org.testfx.assertions.api.Assertions.assertThat;\r\n\r\n@ExtendWith(ApplicationExtension.class)\r\nclass RegistrationTest {\r\n\r\n    public static final String USERNAME = \"user\";\r\n    public static final String PASSWORD = \"password\";\r\n\r\n    @BeforeEach\r\n    void setUp() throws Exception {\r\n        FileSystemService.APPLICATION_FOLDER = \".test-registration-example\";\r\n        FileUtils.cleanDirectory(FileSystemService.getApplicationHomeFolder().toFile());\r\n        UserService.initDatabase();\r\n    }\r\n\r\n    @Start\r\n    void start(Stage primaryStage) throws Exception {\r\n        Parent root = FXMLLoader.load(getClass().getClassLoader().getResource(\"register.fxml\"));\r\n        primaryStage.setTitle(\"Registration Example\");\r\n        primaryStage.setScene(new Scene(root, 300, 275));\r\n        primaryStage.show();\r\n    }\r\n\r\n    @Test\r\n    void testRegistration(FxRobot robot) {\r\n        robot.clickOn(\"#username\");\r\n        robot.write(USERNAME);\r\n        robot.clickOn(\"#password\");\r\n        robot.write(PASSWORD);\r\n        robot.clickOn(\"#registerButton\");\r\n\r\n        assertThat(robot.lookup(\"#registrationMessage\").queryText()).hasText(\"Account created successfully!\");\r\n        assertThat(UserService.getAllUsers()).size().isEqualTo(1);\r\n\r\n        robot.clickOn(\"#registerButton\");\r\n        assertThat(robot.lookup(\"#registrationMessage\").queryText()).hasText(\r\n                String.format(\"An account with the username %s already exists!\", USERNAME)\r\n        );\r\n\r\n        robot.clickOn(\"#username\");\r\n        robot.write(\"1\");\r\n        robot.clickOn(\"#registerButton\");\r\n\r\n        assertThat(robot.lookup(\"#registrationMessage\").queryText()).hasText(\"Account created successfully!\");\r\n        assertThat(UserService.getAllUsers()).size().isEqualTo(2);\r\n    }\r\n}
===================================================================
diff --git a/src/main/java/florarie/test/RegistrationTest.java b/src/main/java/florarie/test/RegistrationTest.java
--- a/src/main/java/florarie/test/RegistrationTest.java	
+++ b/src/main/java/florarie/test/RegistrationTest.java	
@@ -1,63 +1,59 @@
-package florarie.tests;
+package florarie.test;
 
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Parent;
-import javafx.scene.Scene;
-import javafx.stage.Stage;
+import florarie.controllers.RegistrationController;
+import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.TextField;
+import javafx.scene.text.Text;
 import org.apache.commons.io.FileUtils;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
 import florarie.services.FileSystemService;
 import florarie.services.UserService;
-import org.testfx.api.FxRobot;
-import org.testfx.framework.junit5.ApplicationExtension;
-import org.testfx.framework.junit5.Start;
+//import org.testfx.framework.junit.ApplicationTest;
 
-import static org.testfx.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
 
-@ExtendWith(ApplicationExtension.class)
-class RegistrationTest {
+public class RegistrationTest {
 
-    public static final String USERNAME = "user";
-    public static final String PASSWORD = "password";
+    public static final String TEST_USER = "testUser";
+    public static final String TEST_PASSWORD = "testPassword";
+    private RegistrationController controller;
 
-    @BeforeEach
-    void setUp() throws Exception {
-        FileSystemService.APPLICATION_FOLDER = ".test-registration-example";
-        FileUtils.cleanDirectory(FileSystemService.getApplicationHomeFolder().toFile());
-        UserService.initDatabase();
+    @BeforeClass
+    public static void setupClass() throws Exception {
+        FileSystemService.APPLICATION_FOLDER = ".florarie_proiect";
+        FileSystemService.initApplicationHomeDirIfNeeded();
+        UserService.loadUsersFromFile();
     }
 
-    @Start
-    void start(Stage primaryStage) throws Exception {
-        Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("register.fxml"));
-        primaryStage.setTitle("Registration Example");
-        primaryStage.setScene(new Scene(root, 300, 275));
-        primaryStage.show();
+    @Before
+    public void setUp() throws Exception {
+        FileUtils.cleanDirectory(FileSystemService.getApplicationHomePath().toFile());
+        UserService.loadUsersFromFile();
+
+        controller = new RegistrationController();
+        controller.usernameField = new TextField();
+        controller.passwordField = new PasswordField();
+        controller.role = new ChoiceBox();
+        controller.registrationMessage = new Text();
+
+        controller.passwordField.setText(TEST_PASSWORD);
+        controller.usernameField.setText(TEST_USER);
     }
 
     @Test
-    void testRegistration(FxRobot robot) {
-        robot.clickOn("#username");
-        robot.write(USERNAME);
-        robot.clickOn("#password");
-        robot.write(PASSWORD);
-        robot.clickOn("#registerButton");
-
-        assertThat(robot.lookup("#registrationMessage").queryText()).hasText("Account created successfully!");
-        assertThat(UserService.getAllUsers()).size().isEqualTo(1);
+    public void testHandleAddUserActionCode() {
+        controller.handleRegisterAction();
+        assertEquals(1, UserService.getUsers().size());
+        assertEquals("Account created successfully!", controller.registrationMessage.getText());
+    }
 
-        robot.clickOn("#registerButton");
-        assertThat(robot.lookup("#registrationMessage").queryText()).hasText(
-                String.format("An account with the username %s already exists!", USERNAME)
-        );
-
-        robot.clickOn("#username");
-        robot.write("1");
-        robot.clickOn("#registerButton");
-
-        assertThat(robot.lookup("#registrationMessage").queryText()).hasText("Account created successfully!");
-        assertThat(UserService.getAllUsers()).size().isEqualTo(2);
+    @Test
+    public void testAddSameUserTwice() {
+        controller.handleRegisterAction();
+        controller.handleRegisterAction();
+        assertEquals("An account with the username " + TEST_USER + " already exists!", controller.registrationMessage.getText());
     }
 }
\ No newline at end of file
Index: src/main/java/florarie/services/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie.services;\r\n\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport florarie.exceptions.CouldNotWriteUsers;\r\nimport florarie.exceptions.UsernameAlreadyExists;\r\nimport florarie.model.User;\r\nimport org.apache.commons.io.FileUtils;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class UserService {\r\n\r\n    private static List<User> users;\r\n    private static final Path USERS_PATH = FileSystemService.getPathToFile(\"config\", \"users.json\");\r\n\r\n    public static void loadUsersFromFile() throws IOException {\r\n\r\n        if (!Files.exists(USERS_PATH)) {\r\n            FileUtils.copyURLToFile(UserService.class.getClassLoader().getResource(\"users.json\"), USERS_PATH.toFile());\r\n        }\r\n\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n        users = objectMapper.readValue(USERS_PATH.toFile(), new TypeReference<List<User>>() {\r\n        });\r\n    }\r\n\r\n    public static void addUser(String username, String password, String role) throws UsernameAlreadyExists {\r\n        checkUserDoesNotAlreadyExist(username);\r\n        users.add(new User(username, encodePassword(username, password), role));\r\n        persistUsers();\r\n    }\r\n\r\n    public static void checkUserDoesNotAlreadyExist(String username) throws UsernameAlreadyExists {\r\n        for (User user : users) {\r\n            if (Objects.equals(username, user.getUsername()))\r\n                throw new UsernameAlreadyExists(username);\r\n        }\r\n    }\r\n\r\n    private static void persistUsers() {\r\n        try {\r\n            ObjectMapper objectMapper = new ObjectMapper();\r\n            objectMapper.writerWithDefaultPrettyPrinter().writeValue(USERS_PATH.toFile(), users);\r\n        } catch (IOException e) {\r\n            throw new CouldNotWriteUsers();\r\n        }\r\n    }\r\n\r\n    private static String encodePassword(String salt, String password) {\r\n        MessageDigest md = getMessageDigest();\r\n        md.update(salt.getBytes(StandardCharsets.UTF_8));\r\n\r\n        byte[] hashedPassword = md.digest(password.getBytes(StandardCharsets.UTF_8));\r\n\r\n        // This is the way a password should be encoded when checking the credentials\r\n        return new String(hashedPassword, StandardCharsets.UTF_8)\r\n                .replace(\"\\\"\", \"\"); //to be able to save in JSON format\r\n    }\r\n\r\n    public static boolean checkPassword(String salt, String username, String password) {\r\n        MessageDigest md = getMessageDigest();\r\n        md.update(salt.getBytes(StandardCharsets.UTF_8));\r\n        // Find the user with the given username\r\n        User user = null;\r\n        for (User u : users) {\r\n            if (u.getUsername().equals(username)) {\r\n                user = u;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (user == null) {\r\n            // User not found\r\n            return false;\r\n        }\r\n\r\n        // Hash the input password with the user's salt\r\n        byte[] hashedPassword = md.digest(password.getBytes(StandardCharsets.UTF_8));\r\n\r\n        // Convert the byte array to a String using UTF-8 encoding\r\n        String hashedPasswordString = new String(hashedPassword, StandardCharsets.UTF_8);\r\n\r\n        // Compare the two hashes to see if they match\r\n        return hashedPasswordString.equals(user.getPassword());\r\n    }\r\n\r\n    private static byte[] hashPassword(String password, String salt) {\r\n        MessageDigest md = getMessageDigest();\r\n        md.update(salt.getBytes(StandardCharsets.UTF_8));\r\n        return md.digest(password.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n\r\n\r\n    private static MessageDigest getMessageDigest() {\r\n        MessageDigest md;\r\n        try {\r\n            md = MessageDigest.getInstance(\"SHA-512\");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            throw new IllegalStateException(\"SHA-512 does not exist!\");\r\n        }\r\n        return md;\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/florarie/services/UserService.java b/src/main/java/florarie/services/UserService.java
--- a/src/main/java/florarie/services/UserService.java	
+++ b/src/main/java/florarie/services/UserService.java	
@@ -6,6 +6,8 @@
 import florarie.exceptions.UsernameAlreadyExists;
 import florarie.model.User;
 import org.apache.commons.io.FileUtils;
+import org.dizitart.no2.Nitrite;
+import org.dizitart.no2.objects.ObjectRepository;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
@@ -17,10 +19,13 @@
 import java.util.List;
 import java.util.Objects;
 
+import static florarie.services.FileSystemService.getPathToFile;
+
 public class UserService {
 
-    private static List<User> users;
-    private static final Path USERS_PATH = FileSystemService.getPathToFile("config", "users.json");
+    public static List<User> users;
+    public static Path USERS_PATH = FileSystemService.getPathToFile("config", "users.json");
+
 
     public static void loadUsersFromFile() throws IOException {
 
@@ -56,7 +61,7 @@
         }
     }
 
-    private static String encodePassword(String salt, String password) {
+    public static String encodePassword(String salt, String password) {
         MessageDigest md = getMessageDigest();
         md.update(salt.getBytes(StandardCharsets.UTF_8));
 
@@ -110,6 +115,8 @@
         }
         return md;
     }
-
+    public static List<User> getUsers() {
+        return users;
+    }
 
 }
Index: src/main/resources/home.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import java.lang.*?>\r\n<?import java.util.*?>\r\n<?import javafx.scene.*?>\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.layout.*?>\r\n\r\n<AnchorPane xmlns=\"http://javafx.com/javafx\"\r\n            xmlns:fx=\"http://javafx.com/fxml\"\r\n            fx:controller=\"$CONTROLLER_NAME$\"\r\n            prefHeight=\"400.0\" prefWidth=\"600.0\" >\r\n\r\n</AnchorPane>\r\n
===================================================================
diff --git a/src/main/resources/home.fxml b/src/main/resources/home.fxml
--- a/src/main/resources/home.fxml	
+++ b/src/main/resources/home.fxml	
@@ -1,14 +1,38 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import java.lang.*?>
-<?import java.util.*?>
-<?import javafx.scene.*?>
 <?import javafx.scene.control.*?>
 <?import javafx.scene.layout.*?>
 
-<AnchorPane xmlns="http://javafx.com/javafx"
-            xmlns:fx="http://javafx.com/fxml"
-            fx:controller="$CONTROLLER_NAME$"
-            prefHeight="400.0" prefWidth="600.0" >
+<GridPane alignment="center" hgap="10" vgap="10" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1">
+
+<children>
+      <GridPane prefHeight="127.0" prefWidth="285.0" GridPane.rowIndex="1">
+        <columnConstraints>
+          <ColumnConstraints hgrow="SOMETIMES" maxWidth="95.0" minWidth="10.0" prefWidth="77.0" />
+          <ColumnConstraints hgrow="SOMETIMES" maxWidth="91.0" minWidth="51.0" prefWidth="91.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="95.0" minWidth="10.0" prefWidth="78.0" />
+        </columnConstraints>
+        <rowConstraints>
+          <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+        </rowConstraints>
+         <children>
+
+          <Button fx:id="login" alignment="CENTER" prefHeight="25.0" prefWidth="91.0" text="Login" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+
+          <Button fx:id="register" alignment="CENTER" prefHeight="25.0" prefWidth="92.0" text="Inregistrare" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+         </children>
+      </GridPane>
 
-</AnchorPane>
+</children>
+   <columnConstraints>
+      <ColumnConstraints />
+   </columnConstraints>
+   <rowConstraints>
+      <RowConstraints maxHeight="20.0" minHeight="0.0" prefHeight="0.0" />
+      <RowConstraints maxHeight="160.0" minHeight="127.0" prefHeight="127.0" />
+      <RowConstraints maxHeight="33.0" minHeight="0.0" prefHeight="33.0" />
+   </rowConstraints>
+
+</GridPane>
Index: src/main/java/florarie/services/FileSystemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie.services;\r\n\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\n\r\npublic class FileSystemService {\r\n    private static final String APPLICATION_FOLDER = \".registration-example\";\r\n    private static final String USER_FOLDER = System.getProperty(\"user.home\");\r\n    public static final Path APPLICATION_HOME_PATH = Paths.get(USER_FOLDER, APPLICATION_FOLDER);\r\n\r\n    public static Path getPathToFile(String... path) {\r\n        return APPLICATION_HOME_PATH.resolve(Paths.get(\".\", path));\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/florarie/services/FileSystemService.java b/src/main/java/florarie/services/FileSystemService.java
--- a/src/main/java/florarie/services/FileSystemService.java	
+++ b/src/main/java/florarie/services/FileSystemService.java	
@@ -1,14 +1,23 @@
 package florarie.services;
 
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
 public class FileSystemService {
-    private static final String APPLICATION_FOLDER = ".registration-example";
+    public static String APPLICATION_FOLDER = ".florarie_proiect";
     private static final String USER_FOLDER = System.getProperty("user.home");
     public static final Path APPLICATION_HOME_PATH = Paths.get(USER_FOLDER, APPLICATION_FOLDER);
 
     public static Path getPathToFile(String... path) {
         return APPLICATION_HOME_PATH.resolve(Paths.get(".", path));
     }
+    public static Path getApplicationHomePath() {
+        return Paths.get(USER_FOLDER, APPLICATION_FOLDER);
+    }
+
+    public static void initApplicationHomeDirIfNeeded() {
+        if (!Files.exists(getApplicationHomePath()))
+            getApplicationHomePath().toFile().mkdirs();
+    }
 }
Index: src/main/java/florarie/controllers/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie.controllers;\r\n\r\nimport florarie.services.UserService;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.ChoiceBox;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.text.Text;\r\npublic class LoginController {\r\n    @FXML\r\n    public Text loginMessage;\r\n    @FXML\r\n    public PasswordField passwordField;\r\n    @FXML\r\n    public TextField usernameField;\r\n\r\n    @FXML\r\n    private ChoiceBox role;\r\n    @FXML\r\n    public void initialize() {\r\n        role.getItems().addAll(\"Client\", \"Admin\");\r\n    }\r\n    @FXML\r\n    public void handleLoginButtonAction() {\r\n        String username = usernameField.getText();\r\n        String password = passwordField.getText();\r\n\r\n        try{\r\n            UserService.checkUserDoesNotAlreadyExist(usernameField.getText());\r\n            if(UserService.checkPassword(usernameField.getText(), passwordField.getText(), usernameField.getText())){\r\n                if(role.getValue()==\"Client\"){\r\n                    loginMessage.setText(\"Logat ca si client.\");\r\n                } else if(role.getValue()==\"Admin\"){\r\n                    loginMessage.setText(\"Logat ca si admin.\");\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n\r\n        }\r\n\r\n\r\n        if (username == null || username.isEmpty()) {\r\n            loginMessage.setText(\"Tastati un username!\");\r\n            return;\r\n        }\r\n        if (password == null || password.isEmpty()) {\r\n            loginMessage.setText(\"Tastati o parola!\");\r\n            return;\r\n        }\r\n\r\n        loginMessage.setText(\"Parola sau username gresite!\");\r\n    }\r\n\r\n    public void handleCancelButtonAction() {\r\n        CancelController.initialize();\r\n    }\r\n}
===================================================================
diff --git a/src/main/java/florarie/controllers/LoginController.java b/src/main/java/florarie/controllers/LoginController.java
--- a/src/main/java/florarie/controllers/LoginController.java	
+++ b/src/main/java/florarie/controllers/LoginController.java	
@@ -3,10 +3,13 @@
 import florarie.services.UserService;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
+import javafx.scene.control.Button;
 import javafx.scene.control.ChoiceBox;
 import javafx.scene.control.PasswordField;
 import javafx.scene.control.TextField;
 import javafx.scene.text.Text;
+import javafx.stage.Stage;
+
 public class LoginController {
     @FXML
     public Text loginMessage;
@@ -17,26 +20,33 @@
 
     @FXML
     private ChoiceBox role;
+
+    @FXML
+    private Button cancelButton;
+
     @FXML
     public void initialize() {
         role.getItems().addAll("Client", "Admin");
     }
+
     @FXML
     public void handleLoginButtonAction() {
         String username = usernameField.getText();
         String password = passwordField.getText();
 
-        try{
+
+        try {
+            UserService.loadUsersFromFile();
             UserService.checkUserDoesNotAlreadyExist(usernameField.getText());
-            if(UserService.checkPassword(usernameField.getText(), passwordField.getText(), usernameField.getText())){
-                if(role.getValue()=="Client"){
+            if (UserService.checkPassword(usernameField.getText(), passwordField.getText(), usernameField.getText())) {
+                if (role.getValue() == "Client") {
                     loginMessage.setText("Logat ca si client.");
-                } else if(role.getValue()=="Admin"){
+                } else if (role.getValue() == "Admin") {
                     loginMessage.setText("Logat ca si admin.");
                 }
             }
-        }catch (Exception e){
-
+        } catch (Exception e) {
+            e.printStackTrace();
         }
 
 
@@ -52,7 +62,11 @@
         loginMessage.setText("Parola sau username gresite!");
     }
 
-    public void handleCancelButtonAction() {
-        CancelController.initialize();
+    @FXML
+    private void handleCancelButtonAction(ActionEvent event) {
+        // Get the current stage
+        Stage stage = (Stage) cancelButton.getScene().getWindow();
+        // Close the stage to return to the previous page
+        stage.close();
     }
 }
\ No newline at end of file
Index: src/main/resources/login.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<?import javafx.geometry.Insets?>\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.Text?>\r\n\r\n<GridPane xmlns:fx=\"http://javafx.com/fxml/1\" alignment=\"center\"\r\n          hgap=\"10\" vgap=\"10\" prefWidth=\"600\" prefHeight=\"400\"\r\n          xmlns=\"http://javafx.com/javafx/8.0.172-ea\"\r\n          fx:controller=\"florarie.controllers.LoginController\">\r\n    <padding>\r\n        <Insets bottom=\"25.0\" left=\"25.0\" right=\"25.0\" top=\"25.0\"/>\r\n    </padding>\r\n    <Text id=\"title-text\" text=\"Florarie\"\r\n          GridPane.columnIndex=\"0\" GridPane.columnSpan=\"2\"\r\n          GridPane.rowIndex=\"0\"/>\r\n\r\n    <Label text=\"Username:\" GridPane.columnIndex=\"0\"\r\n           GridPane.rowIndex=\"1\"/>\r\n    <TextField fx:id=\"usernameField\" GridPane.columnIndex=\"1\"\r\n               GridPane.rowIndex=\"1\"/>\r\n    <Label text=\"Password:\" GridPane.columnIndex=\"0\"\r\n           GridPane.rowIndex=\"2\"/>\r\n    <PasswordField fx:id=\"passwordField\" GridPane.columnIndex=\"1\"\r\n                   GridPane.rowIndex=\"2\"/>\r\n    <Label text=\"Role:\" GridPane.columnIndex=\"0\"\r\n           GridPane.rowIndex=\"3\"/>\r\n    <ChoiceBox fx:id=\"role\" prefWidth=\"150.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\">\r\n    </ChoiceBox>\r\n\r\n    <HBox spacing=\"10\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"4\">\r\n        <Button onAction=\"#handleLoginButtonAction\" text=\"Login\"/>\r\n        <Button onAction=\"#handleCancelButtonAction\" text=\"Cancel\"/>\r\n    </HBox>\r\n\r\n    <Text fx:id=\"loginMessage\" GridPane.columnIndex=\"1\"\r\n          GridPane.rowIndex=\"6\"/>\r\n</GridPane>\r\n
===================================================================
diff --git a/src/main/resources/login.fxml b/src/main/resources/login.fxml
--- a/src/main/resources/login.fxml	
+++ b/src/main/resources/login.fxml	
@@ -1,38 +1,44 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<?import javafx.geometry.Insets?>
+
+<?import javafx.geometry.*?>
 <?import javafx.scene.control.*?>
 <?import javafx.scene.layout.*?>
-<?import javafx.scene.text.Text?>
+<?import javafx.scene.text.*?>
 
-<GridPane xmlns:fx="http://javafx.com/fxml/1" alignment="center"
-          hgap="10" vgap="10" prefWidth="600" prefHeight="400"
-          xmlns="http://javafx.com/javafx/8.0.172-ea"
-          fx:controller="florarie.controllers.LoginController">
+<GridPane alignment="center" hgap="10" prefHeight="332.0" prefWidth="379.0" vgap="10" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="florarie.controllers.LoginController">
     <padding>
-        <Insets bottom="25.0" left="25.0" right="25.0" top="25.0"/>
+        <Insets bottom="25.0" left="25.0" right="25.0" top="25.0" />
     </padding>
-    <Text id="title-text" text="Florarie"
-          GridPane.columnIndex="0" GridPane.columnSpan="2"
-          GridPane.rowIndex="0"/>
+    <Text id="title-text" text="Florarie" textAlignment="CENTER" wrappingWidth="216.5693359375" GridPane.columnIndex="0" GridPane.columnSpan="2" GridPane.rowIndex="0">
+      <font>
+         <Font size="30.0" />
+      </font></Text>
 
-    <Label text="Username:" GridPane.columnIndex="0"
-           GridPane.rowIndex="1"/>
-    <TextField fx:id="usernameField" GridPane.columnIndex="1"
-               GridPane.rowIndex="1"/>
-    <Label text="Password:" GridPane.columnIndex="0"
-           GridPane.rowIndex="2"/>
-    <PasswordField fx:id="passwordField" GridPane.columnIndex="1"
-                   GridPane.rowIndex="2"/>
-    <Label text="Role:" GridPane.columnIndex="0"
-           GridPane.rowIndex="3"/>
-    <ChoiceBox fx:id="role" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="3">
+    <Label text="Username:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
+    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+    <Label text="Password:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
+    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+    <Label alignment="CENTER_RIGHT" prefHeight="18.0" prefWidth="56.0" text="Role:" textAlignment="RIGHT" GridPane.columnIndex="0" GridPane.rowIndex="3" />
+    <ChoiceBox fx:id="role" prefHeight="25.0" prefWidth="96.0" GridPane.columnIndex="1" GridPane.rowIndex="3">
     </ChoiceBox>
 
-    <HBox spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="4">
-        <Button onAction="#handleLoginButtonAction" text="Login"/>
-        <Button onAction="#handleCancelButtonAction" text="Cancel"/>
+    <HBox prefHeight="26.0" prefWidth="151.0" spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="4">
+        <Button onAction="#handleLoginButtonAction" prefHeight="25.0" prefWidth="57.0" text="Login" />
+        <Button fx:id="cancelButton" onAction="#handleCancelButtonAction" text="Cancel" />
     </HBox>
 
-    <Text fx:id="loginMessage" GridPane.columnIndex="1"
-          GridPane.rowIndex="6"/>
+    <Text fx:id="loginMessage" GridPane.columnIndex="1" GridPane.rowIndex="6" />
+   <columnConstraints>
+      <ColumnConstraints />
+      <ColumnConstraints />
+   </columnConstraints>
+   <rowConstraints>
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+   </rowConstraints>
 </GridPane>
Index: src/main/java/florarie/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie;\r\n\r\nimport florarie.services.UserService;\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.HPos;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    Button login, register;\r\n    Scene loginScene, registerScene;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        login=new Button();\r\n        register=new Button();\r\n\r\n        Parent loginRoot = FXMLLoader.load(getClass().getClassLoader().getResource(\"login.fxml\"));\r\n        loginScene=new Scene(loginRoot, 600, 400);\r\n\r\n        Parent registerRoot = FXMLLoader.load(getClass().getClassLoader().getResource(\"register.fxml\"));\r\n        registerScene=new Scene(registerRoot,600,400);\r\n\r\n        primaryStage.setTitle(\"Home Page\");\r\n        login.setText(\"Login\");\r\n        register.setText(\"Inregistrare\");\r\n\r\n        login.setOnAction(e -> primaryStage.setScene(loginScene));\r\n        register.setOnAction(e -> primaryStage.setScene(registerScene));\r\n\r\n\r\n        GridPane layout=new GridPane();\r\n        layout.setAlignment(Pos.CENTER);\r\n        layout.setHgap(10);\r\n        layout.setVgap(10);\r\n\r\n        GridPane.setConstraints(login, 0, 0);\r\n        GridPane.setHalignment(login, HPos.CENTER);\r\n\r\n\r\n        GridPane.setConstraints(register, 0, 1);\r\n        GridPane.setHalignment(register, HPos.CENTER);\r\n\r\n        layout.getChildren().addAll(login, register);\r\n\r\n        primaryStage.setScene(new Scene(layout, 300, 275));\r\n        primaryStage.show();\r\n//        try {\r\n//            UserService.loadUsersFromFile();\r\n//\r\n//            primaryStage.setTitle(\"Inregistrare\");\r\n//            primaryStage.setScene(new Scene(root, 300, 275));\r\n//            primaryStage.show();\r\n//\r\n//        } catch (Exception e) {\r\n//            e.printStackTrace();\r\n//        }\r\n       /* try {\r\n\r\n            primaryStage.setTitle(\"Login\");\r\n            primaryStage.setScene();\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }*/\r\n\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n}
===================================================================
diff --git a/src/main/java/florarie/Main.java b/src/main/java/florarie/Main.java
--- a/src/main/java/florarie/Main.java	
+++ b/src/main/java/florarie/Main.java	
@@ -13,64 +13,32 @@
 import javafx.stage.Stage;
 
 public class Main extends Application {
-    Button login, register;
-    Scene loginScene, registerScene;
 
     @Override
     public void start(Stage primaryStage) throws Exception {
-        login=new Button();
-        register=new Button();
+        Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("home.fxml"));
+        Scene homeScene = new Scene(root, 300, 275);
+        primaryStage.setScene(homeScene);
+        primaryStage.show();
 
         Parent loginRoot = FXMLLoader.load(getClass().getClassLoader().getResource("login.fxml"));
-        loginScene=new Scene(loginRoot, 600, 400);
+        Scene loginScene = new Scene(loginRoot, 600, 400);
 
         Parent registerRoot = FXMLLoader.load(getClass().getClassLoader().getResource("register.fxml"));
-        registerScene=new Scene(registerRoot,600,400);
+        Scene registerScene = new Scene(registerRoot, 600, 400);
 
         primaryStage.setTitle("Home Page");
-        login.setText("Login");
-        register.setText("Inregistrare");
 
+        Button login = (Button) homeScene.lookup("#login");
         login.setOnAction(e -> primaryStage.setScene(loginScene));
+
+        Button register = (Button) homeScene.lookup("#register");
         register.setOnAction(e -> primaryStage.setScene(registerScene));
 
-
-        GridPane layout=new GridPane();
-        layout.setAlignment(Pos.CENTER);
-        layout.setHgap(10);
-        layout.setVgap(10);
+        /*Button cancel = (Button) loginScene.lookup("#cancel");
+        cancel.setOnAction(e -> primaryStage.setScene(homeScene));*/
+    }
 
-        GridPane.setConstraints(login, 0, 0);
-        GridPane.setHalignment(login, HPos.CENTER);
-
-
-        GridPane.setConstraints(register, 0, 1);
-        GridPane.setHalignment(register, HPos.CENTER);
-
-        layout.getChildren().addAll(login, register);
-
-        primaryStage.setScene(new Scene(layout, 300, 275));
-        primaryStage.show();
-//        try {
-//            UserService.loadUsersFromFile();
-//
-//            primaryStage.setTitle("Inregistrare");
-//            primaryStage.setScene(new Scene(root, 300, 275));
-//            primaryStage.show();
-//
-//        } catch (Exception e) {
-//            e.printStackTrace();
-//        }
-       /* try {
-
-            primaryStage.setTitle("Login");
-            primaryStage.setScene();
-            primaryStage.show();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }*/
-
-    }
 
     public static void main(String[] args) {
         launch(args);
Index: src/main/java/florarie/controllers/RegistrationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package florarie.controllers;\r\n\r\nimport florarie.exceptions.UsernameAlreadyExists;\r\nimport florarie.services.UserService;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.ChoiceBox;\r\nimport javafx.scene.control.PasswordField;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.text.Text;\r\n\r\npublic class RegistrationController {\r\n\r\n    @FXML\r\n    private Text registrationMessage;\r\n    @FXML\r\n    private PasswordField passwordField;\r\n    @FXML\r\n    private TextField usernameField;\r\n    @FXML\r\n    private ChoiceBox role;\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        role.getItems().addAll(\"Client\", \"Admin\");\r\n    }\r\n\r\n    @FXML\r\n    public void handleRegisterAction() {\r\n        try {\r\n            UserService.addUser(usernameField.getText(), passwordField.getText(), (String) role.getValue());\r\n            registrationMessage.setText(\"Cont creat cu succes!\");\r\n        } catch (UsernameAlreadyExists e) {\r\n            registrationMessage.setText(e.getMessage());\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/src/main/java/florarie/controllers/RegistrationController.java b/src/main/java/florarie/controllers/RegistrationController.java
--- a/src/main/java/florarie/controllers/RegistrationController.java	
+++ b/src/main/java/florarie/controllers/RegistrationController.java	
@@ -2,22 +2,27 @@
 
 import florarie.exceptions.UsernameAlreadyExists;
 import florarie.services.UserService;
+import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
+import javafx.scene.control.Button;
 import javafx.scene.control.ChoiceBox;
 import javafx.scene.control.PasswordField;
 import javafx.scene.control.TextField;
 import javafx.scene.text.Text;
+import javafx.stage.Stage;
 
 public class RegistrationController {
 
     @FXML
-    private Text registrationMessage;
+    public Text registrationMessage;
+    @FXML
+    public PasswordField passwordField;
     @FXML
-    private PasswordField passwordField;
+    public TextField usernameField;
     @FXML
-    private TextField usernameField;
+    public ChoiceBox<String> role;
     @FXML
-    private ChoiceBox role;
+    private Button cancelButton;
 
     @FXML
     public void initialize() {
@@ -27,10 +32,21 @@
     @FXML
     public void handleRegisterAction() {
         try {
-            UserService.addUser(usernameField.getText(), passwordField.getText(), (String) role.getValue());
+            UserService.loadUsersFromFile();
+            UserService.addUser(usernameField.getText(), passwordField.getText(), role.getValue());
             registrationMessage.setText("Cont creat cu succes!");
         } catch (UsernameAlreadyExists e) {
             registrationMessage.setText(e.getMessage());
+        } catch (Exception e){
+            e.printStackTrace();
         }
     }
+
+    @FXML
+    private void handleCancelButtonAction(ActionEvent event) {
+        // Get the current stage
+        Stage stage = (Stage) cancelButton.getScene().getWindow();
+        // Close the stage to return to the previous page
+        stage.close();
+    }
 }
\ No newline at end of file
Index: src/main/resources/register.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.Insets?>\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.Text?>\r\n<GridPane xmlns:fx=\"http://javafx.com/fxml/1\" alignment=\"center\" hgap=\"10\" prefHeight=\"400\" prefWidth=\"600\"\r\n          vgap=\"10\" xmlns=\"http://javafx.com/javafx/10.0.2-internal\"\r\n          fx:controller=\"florarie.controllers.RegistrationController\">\r\n    <padding>\r\n        <Insets bottom=\"25.0\" left=\"25.0\" right=\"25.0\" top=\"25.0\"/>\r\n    </padding>\r\n    <Text id=\"title-text\" text=\"Florarie\" GridPane.columnIndex=\"0\" GridPane.columnSpan=\"2\"\r\n          GridPane.rowIndex=\"0\"/>\r\n\r\n    <Label text=\"Username:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\"/>\r\n\r\n    <TextField fx:id=\"usernameField\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\"/>\r\n\r\n    <Label text=\"Password:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"2\"/>\r\n\r\n    <PasswordField fx:id=\"passwordField\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"2\"/>\r\n\r\n    <Label text=\"Role:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"3\"/>\r\n\r\n    <ChoiceBox fx:id=\"role\" prefWidth=\"150.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\">\r\n    </ChoiceBox>\r\n\r\n    <Text fx:id=\"registrationMessage\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"7\"/>\r\n    <HBox alignment=\"bottom_right\" spacing=\"10\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"5\">\r\n        <Button onAction=\"#handleRegisterAction\" text=\"Register\"/>\r\n    </HBox>\r\n</GridPane>
===================================================================
diff --git a/src/main/resources/register.fxml b/src/main/resources/register.fxml
--- a/src/main/resources/register.fxml	
+++ b/src/main/resources/register.fxml	
@@ -1,33 +1,50 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import javafx.geometry.Insets?>
+<?import javafx.geometry.*?>
 <?import javafx.scene.control.*?>
 <?import javafx.scene.layout.*?>
-<?import javafx.scene.text.Text?>
-<GridPane xmlns:fx="http://javafx.com/fxml/1" alignment="center" hgap="10" prefHeight="400" prefWidth="600"
-          vgap="10" xmlns="http://javafx.com/javafx/10.0.2-internal"
-          fx:controller="florarie.controllers.RegistrationController">
+<?import javafx.scene.text.*?>
+
+<GridPane alignment="center" hgap="10" prefHeight="400" prefWidth="600" vgap="10" xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="florarie.controllers.RegistrationController">
     <padding>
-        <Insets bottom="25.0" left="25.0" right="25.0" top="25.0"/>
+        <Insets bottom="25.0" left="25.0" right="25.0" top="25.0" />
     </padding>
-    <Text id="title-text" text="Florarie" GridPane.columnIndex="0" GridPane.columnSpan="2"
-          GridPane.rowIndex="0"/>
+    <Text id="title-text" text="Florarie" textAlignment="CENTER" wrappingWidth="217.5693359375" GridPane.columnIndex="0" GridPane.columnSpan="2" GridPane.rowIndex="0">
+      <font>
+         <Font size="30.0" />
+      </font></Text>
 
-    <Label text="Username:" GridPane.columnIndex="0" GridPane.rowIndex="1"/>
+    <Label text="Username:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
 
-    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="1"/>
+    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
 
-    <Label text="Password:" GridPane.columnIndex="0" GridPane.rowIndex="2"/>
+    <Label text="Password:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
 
-    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="2"/>
+    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
 
-    <Label text="Role:" GridPane.columnIndex="0" GridPane.rowIndex="3"/>
+    <Label alignment="CENTER_RIGHT" prefHeight="17.0" prefWidth="56.0" text="Role:" textAlignment="RIGHT" GridPane.columnIndex="0" GridPane.rowIndex="3" />
 
-    <ChoiceBox fx:id="role" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="3">
+    <ChoiceBox fx:id="role" prefHeight="25.0" prefWidth="108.0" GridPane.columnIndex="1" GridPane.rowIndex="3">
     </ChoiceBox>
 
-    <Text fx:id="registrationMessage" GridPane.columnIndex="1" GridPane.rowIndex="7"/>
-    <HBox alignment="bottom_right" spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="5">
-        <Button onAction="#handleRegisterAction" text="Register"/>
+    <Text fx:id="registrationMessage" GridPane.columnIndex="1" GridPane.rowIndex="7" />
+    <HBox alignment="bottom_right" prefHeight="25.0" prefWidth="155.0" spacing="10" GridPane.columnIndex="1" GridPane.rowIndex="5">
+        <Button onAction="#handleRegisterAction" prefHeight="25.0" prefWidth="76.0" text="Register" />
+        <Button fx:id="cancelButton" onAction="#handleCancelButtonAction" text="Cancel" />
+
     </HBox>
-</GridPane>
\ No newline at end of file
+   <columnConstraints>
+      <ColumnConstraints />
+      <ColumnConstraints />
+   </columnConstraints>
+   <rowConstraints>
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+      <RowConstraints />
+   </rowConstraints>
+</GridPane>
